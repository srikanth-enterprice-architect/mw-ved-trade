from datetime import date
from urllib.parse import urlsplit, parse_qs
from kiteconnect import KiteConnect
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

import pyotp

from mw_minisoft.trade_logger.logger import cus_logger


def obtain_access_token(user_record, firefox_driver_path):
    """
        This is the program's very first step; it will obtain the request token based on the
        username, password and toptp token.
        https://kite.zerodha.com/connect/login?v=3&api_key=1ggwtgshfjxffg59
    """
    login_url = "https://kite.trade/connect/login?v=3&api_key={apiKey}".format(apiKey=user_record.api_key)
    time_otp = pyotp.TOTP(user_record.login_pin)
    # You can run Chrome without the UI by enabling the following option.
    options = Options()
    options.headless = True
    cus_logger.info("initiated the process of obtaining the access_token for the user of %s", user_record.user_id)
    try:
        # change the firefox driver with-out UI
        driver = webdriver.Firefox(executable_path=firefox_driver_path, options=options)
        driver.get(login_url)
        wait = WebDriverWait(driver, 20)

        # Find User id field and set user id, and password
        wait.until(EC.presence_of_element_located((By.XPATH, '//input[@type="text"]'))) \
            .send_keys(user_record.user_id)
        wait.until(EC.presence_of_element_located((By.XPATH, '//input[@type="password"]'))) \
            .send_keys(user_record.password)
        wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@type="submit"]'))).submit()

        # generate the google-oauth based totp id and set
        wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="totp"]'))).send_keys(time_otp.now())
        wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@type="submit"]'))).submit()
        wait.until(EC.url_contains('status=success'))

        # access current browser URL, then collect the access-token
        request_token = parse_qs(urlsplit(driver.current_url).query)['request_token'][0]
        driver.quit()
        return request_token
    except Exception as exception:
        cus_logger.error("Obtaining Access Token for the user(%s) had been failed, Error message %s",
                         (user_record.user_id), exception)


def create_user_session(user_record, firefox_driver_path):
    """
    This code will generate the accessToken from the api, later will be used to generate the user session
    """
    cus_logger.info("crating the new user session")
    try:
        if (int(date.today().day)) != int(user_record.day):
            request_token = obtain_access_token(user_record, firefox_driver_path)
            kite_connect = KiteConnect(api_key=user_record.api_key)
            kite_session = kite_connect.generate_session(request_token, user_record.api_secret)
            user_record = update_user_record(user_record, request_token, kite_session["public_token"],
                                             kite_session["access_token"])
        else:
            kite_connect = generate_user_session(user_record)

        return kite_connect, user_record

    except Exception as exception:
        cus_logger.error("creation of user(%s) session  had been failed; Error message %s", (user_record.user_id),
                         exception)


def update_user_record(user_record, request_token, public_token, access_token):
    """
        user record will be updated over here
        :rtype: excel data
    """
    user_record['request_token'] = request_token
    user_record['day'] = int(date.today().day)
    user_record['public_token'] = public_token
    user_record['access_token'] = access_token
    cus_logger.info("updating the user_record")

    return user_record


def generate_user_session(user_record):
    """
        The USER session will be generated by using existing API keys in the system.
    """
    kite_connect = KiteConnect(api_key=user_record['api_key'])
    kite_connect.set_access_token(user_record["access_token"])
    cus_logger.info("A new user session has been created; the session will be returned.")

    return kite_connect
