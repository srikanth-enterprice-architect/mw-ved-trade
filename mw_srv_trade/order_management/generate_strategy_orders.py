from mw_srv_trade.common_operatinos.common_ops import super_user_session, multi_order_qty_normal_order
from mw_srv_trade.historical_feed.historical_feed import read_data_file
from mw_srv_trade.messaging_channel.teligram_channel import *
from mw_srv_trade.order_management.order_management__ce_pe import place_instrument_orders
from mw_srv_trade.trade_lib.strategy_builder.strategy_builder_common import exit_entry_time
from mw_srv_trade.order_management.generate_option_orders import get_option_direction, get_option_direction_df

cus_logger.setLevel(10)


def storage_regular_orders(auto_inputs):
    """
    This code will create each new orders in the file by comparing the previous two records generated by the
    super-trend indicator.
    """
    instruments_df = ticks_indi()
    sp_user_session, sp_user_record = super_user_session()
    for inst_record_position, inst_record in instruments_df.iterrows():
        ticks = inst_record.instrument_trading_symbol.replace(':', '_')
        if inst_record.avail == 'Y' and market_status(ticks):
            strategy_name = inst_record.start_name
            if inst_record.start_name in ["super_long_buy_side", "super_long_sell_side"]:
                strategy_order_decision_maker(auto_inputs, inst_record, sp_user_session, strategy_name)
            elif inst_record.start_name == "day_open_strategy":
                inst_strategy_dos_execution(auto_inputs, inst_record, sp_user_session, strategy_name)

    cus_logger.info('storing regular orders function is completed')


def strategy_order_decision_maker(auto_inputs, inst_record, sp_user_session, strategy_name):
    """
       This code will create each new orders in the file by comparing the previous two records generated by the
       super-trend indicator.
       """
    inst_name = inst_record.instrument_trading_symbol
    inst_name_new = inst_record.instrument_trading_symbol.replace(':', '_')
    inst_order_file_name = create_indicator_order_file(inst_name_new, auto_inputs['data_interval'][0])
    cus_logger.info('checking order available for the instrument %s', inst_name)
    inst_data = read_data_file(inst_name_new, TICKS_FOLDER_, auto_inputs['data_interval'][0])
    inst_strategy_data = inst_data.tail(2)
    inst_first_record_dir = str(inst_strategy_data.iloc[0][strategy_name])
    inst_last_record_dir = str(inst_strategy_data.iloc[1][strategy_name])
    exit_time_ = exit_entry_time(inst_name)
    current_time = datetime.now().time().strftime('%H:%M:%S')
    before_mkt = current_time < exit_time_
    # before_mkt = True
    if inst_last_record_dir != inst_first_record_dir and before_mkt and inst_last_record_dir != 'nan':
        if file_exists := path.exists(inst_order_file_name):
            inst_order_data_filtered = inst_orders_filtered(inst_order_file_name, inst_record, strategy_name)
            if inst_order_data_filtered.shape[0] > 0:
                inst_last_order_dir = inst_order_data_filtered.iloc[-1].inst_direction
                inst_last_order_dir_ = inst_last_order_dir.split('_')[0]

                if ('exit' in inst_last_order_dir) and ('entry' in inst_last_record_dir):
                    inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                            inst_strategy_data, inst_name, sp_user_session, strategy_name)

                elif ('entry' in inst_last_order_dir) and ('exit' in inst_last_record_dir):
                    inst_exit_order_method(file_exists, inst_last_order_dir_, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)

                elif ('entry' in inst_last_order_dir) and (
                        'entry' in inst_last_record_dir) and inst_last_order_dir != inst_last_record_dir:
                    inst_last_record_dir = inst_last_record_dir.split('_')[0]
                    inst_exit_order_method(file_exists, inst_last_order_dir_, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)
                    inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                            inst_strategy_data, inst_name, sp_user_session, strategy_name)

            else:
                inst_last_record_dir = inst_last_record_dir.split('_')[0]
                inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                        inst_strategy_data, inst_name, sp_user_session, strategy_name)
        else:
            inst_last_record_dir = inst_last_record_dir.split('_')[0]
            inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                    inst_strategy_data, inst_name, sp_user_session, strategy_name)

    elif inst_last_record_dir == inst_first_record_dir and before_mkt and inst_last_record_dir != 'nan':
        if file_exists := path.exists(inst_order_file_name):
            inst_order_data_filtered = inst_orders_filtered(inst_order_file_name, inst_record, strategy_name)
            if inst_order_data_filtered.shape[0] > 0:
                inst_last_order_dir = inst_order_data_filtered.iloc[-1].inst_direction
                inst_last_order_dir_ = inst_last_order_dir.split('_')[0]

                if ('exit' in inst_last_order_dir) and ('entry' in inst_last_record_dir):
                    inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                            inst_strategy_data, inst_name, sp_user_session, strategy_name)

                elif ('entry' in inst_last_order_dir) and ('exit' in inst_last_record_dir):
                    inst_exit_order_method(file_exists, inst_last_order_dir_, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)

                elif ('entry' in inst_last_order_dir) and (
                        'entry' in inst_last_record_dir) and inst_last_order_dir != inst_last_record_dir:
                    inst_last_record_dir = inst_last_record_dir.split('_')[0]
                    inst_exit_order_method(file_exists, inst_last_order_dir_, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)
                    inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                            inst_strategy_data, inst_name, sp_user_session, strategy_name)

            else:
                inst_last_record_dir = inst_last_record_dir.split('_')[0]
                inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                        inst_strategy_data, inst_name, sp_user_session, strategy_name)
        else:
            inst_last_record_dir = inst_last_record_dir.split('_')[0]
            inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                    inst_strategy_data, inst_name, sp_user_session, strategy_name)

    elif current_time >= exit_time_:
        if file_exists := path.exists(inst_order_file_name):
            inst_order_data_filtered = inst_orders_filtered(inst_order_file_name, inst_record, strategy_name)
            expiry_today = datetime.strptime(inst_record['instrument_expiry_date'],
                                             '%d-%m-%Y').date() == datetime.now().date()
            if inst_order_data_filtered.shape[0] > 0 and inst_record.holding == 'Y' and expiry_today:
                inst_last_order_dir = inst_order_data_filtered.iloc[-1].inst_direction
                if 'entry' in inst_last_order_dir:
                    inst_exit_order_method(file_exists, inst_last_order_dir, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)

                    inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                            inst_strategy_data, inst_name, sp_user_session, strategy_name)


def inst_strategies_execution(auto_inputs, inst_record, sp_user_session, strategy_name):
    inst_name = inst_record.instrument_trading_symbol
    inst_name_new = inst_record.instrument_trading_symbol.replace(':', '_')
    inst_order_file_name = create_indicator_order_file(inst_name_new, auto_inputs['data_interval'][0])
    cus_logger.info('checking order available for the instrument %s', inst_name)
    inst_data = read_data_file(inst_name_new, TICKS_FOLDER_, auto_inputs['data_interval'][0])
    inst_strategy_data = inst_data.tail(2)
    inst_first_record_dir = str(inst_strategy_data.iloc[0][strategy_name])
    inst_last_record_dir = str(inst_strategy_data.iloc[1][strategy_name])
    exit_time_ = exit_entry_time(inst_name)
    current_time = datetime.now().time().strftime('%H:%M:%S')
    before_mkt = current_time < exit_time_
    if inst_last_record_dir != inst_first_record_dir and before_mkt and inst_last_record_dir != 'nan':
        if file_exists := path.exists(inst_order_file_name):
            inst_order_data_filtered = inst_orders_filtered(inst_order_file_name, inst_record, strategy_name)
            if inst_order_data_filtered.shape[0] > 0:
                inst_last_order_dir = inst_order_data_filtered.iloc[-1].inst_direction
                inst_last_order_dir_ = inst_last_order_dir.split('_')[0]
                if (inst_last_order_dir_ != inst_last_record_dir) and ('entry' in inst_last_order_dir):
                    inst_exit_order_method(file_exists, inst_last_order_dir_, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)

                    inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                            inst_strategy_data, inst_name, sp_user_session, strategy_name)
            else:
                inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                        inst_strategy_data, inst_name, sp_user_session, strategy_name)
        else:
            inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                    inst_strategy_data, inst_name, sp_user_session, strategy_name)

    elif inst_last_record_dir == inst_first_record_dir and before_mkt and inst_last_record_dir != 'nan':
        if file_exists := path.exists(inst_order_file_name):
            inst_order_data_filtered = inst_orders_filtered(inst_order_file_name, inst_record, strategy_name)
            if inst_order_data_filtered.shape[0] > 0:
                inst_last_order_dir = inst_order_data_filtered.iloc[-1].inst_direction
                inst_last_order_dir_ = inst_last_order_dir.split('_')[0]
                if inst_last_order_dir_ != inst_last_record_dir and 'entry' in inst_last_order_dir:
                    inst_exit_order_method(file_exists, inst_last_order_dir_, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)
                    inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                            inst_strategy_data, inst_name, sp_user_session, strategy_name)

    elif current_time >= exit_time_:
        if file_exists := path.exists(inst_order_file_name):
            inst_order_data_filtered = inst_orders_filtered(inst_order_file_name, inst_record, strategy_name)
            expiry_today = datetime.strptime(inst_record['instrument_expiry_date'],
                                             '%d-%m-%Y').date() == datetime.now().date()
            if inst_order_data_filtered.shape[0] > 0 and inst_record.holding == 'N':
                inst_last_order_dir = inst_order_data_filtered.iloc[-1].inst_direction
                if 'entry' in inst_last_order_dir:
                    inst_exit_order_method(file_exists, inst_last_order_dir, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)
            if inst_order_data_filtered.shape[0] > 0 and inst_record.holding == 'Y' and expiry_today:
                inst_last_order_dir = inst_order_data_filtered.iloc[-1].inst_direction
                if 'entry' in inst_last_order_dir:
                    inst_exit_order_method(file_exists, inst_last_order_dir, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)

                    inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                            inst_strategy_data, inst_name, sp_user_session, strategy_name)


def inst_strategy_dos_execution(auto_inputs, inst_record, sp_user_session, strategy_name):
    """
    This code will create each new orders in the file by comparing the previous two records generated by the
    super-trend indicator.
    """
    inst_name = inst_record.instrument_trading_symbol
    inst_name_new = inst_record.instrument_trading_symbol.replace(':', '_')
    inst_order_file_name = create_indicator_order_file(inst_name_new, auto_inputs['data_interval'][0])
    cus_logger.info('checking order available for the instrument %s', inst_name)
    inst_data = read_data_file(inst_name_new, TICKS_FOLDER_, auto_inputs['data_interval'][0])
    inst_strategy_data = inst_data.tail(2)
    inst_first_record_dir = str(inst_strategy_data.iloc[0][strategy_name])
    inst_last_record_dir = str(inst_strategy_data.iloc[1][strategy_name])
    exit_time_ = exit_entry_time(inst_name)
    current_time = datetime.now().time().strftime('%H:%M:%S')
    before_mkt = current_time < exit_time_
    #before_mkt = True
    if inst_last_record_dir != inst_first_record_dir and before_mkt and inst_last_record_dir != 'nan':
        if file_exists := path.exists(inst_order_file_name):
            inst_order_data_filtered = inst_orders_filtered(inst_order_file_name, inst_record, strategy_name)
            if inst_order_data_filtered.shape[0] > 0:
                inst_last_order_dir = inst_order_data_filtered.iloc[-1].inst_direction
                inst_last_order_dir_ = inst_last_order_dir.split('_')[0]

                if ('exit' in inst_last_order_dir) and ('entry' in inst_last_record_dir):
                    inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                            inst_strategy_data, inst_name, sp_user_session, strategy_name)

                elif ('entry' in inst_last_order_dir) and ('exit' in inst_last_record_dir):
                    inst_exit_order_method(file_exists, inst_last_order_dir_, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)

                elif ('entry' in inst_last_order_dir) and (
                        'entry' in inst_last_record_dir) and inst_last_order_dir != inst_last_record_dir:
                    inst_last_record_dir = inst_last_record_dir.split('_')[0]
                    inst_exit_order_method(file_exists, inst_last_order_dir_, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)
                    inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                            inst_strategy_data, inst_name, sp_user_session, strategy_name)

            else:
                inst_last_record_dir = inst_last_record_dir.split('_')[0]
                inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                        inst_strategy_data, inst_name, sp_user_session, strategy_name)
        else:
            if 'entry' in inst_last_record_dir:
                inst_last_record_dir = inst_last_record_dir.split('_')[0]
                inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                        inst_strategy_data, inst_name, sp_user_session, strategy_name)
            elif 'exit' in inst_last_record_dir:
                inst_exit_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                       inst_strategy_data, inst_name, sp_user_session, strategy_name)

    elif inst_last_record_dir == inst_first_record_dir and before_mkt and inst_last_record_dir != 'nan':
        if file_exists := path.exists(inst_order_file_name):
            inst_order_data_filtered = inst_orders_filtered(inst_order_file_name, inst_record, strategy_name)
            if inst_order_data_filtered.shape[0] > 0:
                inst_last_order_dir = inst_order_data_filtered.iloc[-1].inst_direction
                inst_last_order_dir_ = inst_last_order_dir.split('_')[0]

                if ('exit' in inst_last_order_dir) and ('entry' in inst_last_record_dir):
                    inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                            inst_strategy_data, inst_name, sp_user_session, strategy_name)

                elif ('entry' in inst_last_order_dir) and ('exit' in inst_last_record_dir):
                    inst_exit_order_method(file_exists, inst_last_order_dir_, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)

                elif ('entry' in inst_last_order_dir) and (
                        'entry' in inst_last_record_dir) and inst_last_order_dir != inst_last_record_dir:
                    inst_last_record_dir = inst_last_record_dir.split('_')[0]
                    inst_exit_order_method(file_exists, inst_last_order_dir_, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)
                    inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                            inst_strategy_data, inst_name, sp_user_session, strategy_name)

            else:
                inst_last_record_dir = inst_last_record_dir.split('_')[0]
                inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                                        inst_strategy_data, inst_name, sp_user_session, strategy_name)
        else:
            inst_last_record_dir_ = inst_last_record_dir.split('_')[0]
            if 'entry' in inst_last_record_dir:
                inst_entry_order_method(file_exists, inst_last_record_dir_, inst_order_file_name, inst_record,
                                        inst_strategy_data, inst_name, sp_user_session, strategy_name)
            elif 'exit' in inst_last_record_dir:
                inst_exit_order_method(file_exists, inst_last_record_dir_, inst_order_file_name, inst_record,
                                       inst_strategy_data, inst_name, sp_user_session, strategy_name)
    elif current_time >= exit_time_:
        if file_exists := path.exists(inst_order_file_name):
            inst_order_data_filtered = inst_orders_filtered(inst_order_file_name, inst_record, strategy_name)
            if inst_order_data_filtered.shape[0] > 0:
                inst_last_order_dir = inst_order_data_filtered.iloc[-1].inst_direction
                inst_last_order_dir_ = inst_last_order_dir.split('_')[0]
                if 'entry' in inst_last_order_dir:
                    inst_exit_order_method(file_exists, inst_last_order_dir_, inst_order_file_name, inst_record,
                                           inst_strategy_data, inst_name, sp_user_session, strategy_name)


def inst_orders_filtered(inst_order_file_name, inst_record, strategy_name):
    inst_order_data = pd.read_csv(inst_order_file_name)
    inst_order_data_filtered = inst_order_data[inst_order_data.inst_strategy == strategy_name]
    inst_order_data_filtered = inst_order_data_filtered[
        inst_order_data_filtered.inst_name == inst_record.instrument_trading_symbol]
    return inst_order_data_filtered


def inst_exit_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record, inst_strategy_data,
                           inst_name, sp_user_session, strategy_name):
    if 'up' in inst_last_record_dir:
        ind_last_record_value = 'up_exit'
        inst_order_preparation(file_exists, ind_last_record_value, inst_order_file_name, inst_record,
                               inst_strategy_data, inst_name, sp_user_session, strategy_name)
    elif 'down' in inst_last_record_dir:
        ind_last_record_value = 'down_exit'
        inst_order_preparation(file_exists, ind_last_record_value, inst_order_file_name, inst_record,
                               inst_strategy_data, inst_name, sp_user_session, strategy_name)


def inst_entry_order_method(file_exists, inst_last_record_dir, inst_order_file_name, inst_record, inst_strategy_data,
                            inst_name, sp_user_session, strategy_name):
    if 'up' in inst_last_record_dir:
        ind_last_record_value = 'up_entry'
        inst_order_preparation(file_exists, ind_last_record_value, inst_order_file_name, inst_record,
                               inst_strategy_data, inst_name, sp_user_session, strategy_name)
    elif 'down' in inst_last_record_dir:
        ind_last_record_value = 'down_entry'
        inst_order_preparation(file_exists, ind_last_record_value, inst_order_file_name, inst_record,
                               inst_strategy_data, inst_name, sp_user_session, strategy_name)


def inst_order_preparation(file_exists, inst_last_record_dir, inst_order_file_name, inst_record,
                           inst_strategy_data, inst_name, sp_user_session, strategy_name):
    cus_logger.info('Instrument(%s) order type (%s) available', inst_name, inst_last_record_dir)
    strategy_builder_orders = pd.DataFrame()
    if file_exists and 'exit' in inst_last_record_dir:
        inst_order_record = create_inst_order_record(inst_record, inst_last_record_dir,
                                                     inst_strategy_data, inst_name, strategy_name,
                                                     inst_order_file_name, sp_user_session)
        inst_order_record_ = strategy_builder_orders.append(inst_order_record, ignore_index=True)
        inst_order_data = pd.read_csv(inst_order_file_name)
        inst_order_data = inst_order_data.append(inst_order_record_.iloc[-1], ignore_index=True)
        inst_order_data.to_csv(inst_order_file_name, index=False)
        auto_inputs = pd.read_csv(AUTO_INPUTS_FILE)
        send_to_telegram(inst_record, inst_last_record_dir, sp_user_session, inst_order_record, strategy_name)
        place_instrument_orders(auto_inputs, inst_record)
        cus_logger.info('appended the new position order into the file')
    elif (not file_exists) and ('entry' in inst_last_record_dir):
        inst_order_record = create_inst_order_record(inst_record, inst_last_record_dir,
                                                     inst_strategy_data, inst_name, strategy_name,
                                                     inst_order_file_name, sp_user_session)

        default_time_frame = get_option_direction(inst_order_record, sp_user_session)
        direction = get_option_direction_df(default_time_frame)
        if direction == 'up':
            strategy_builder_orders = strategy_builder_orders.append(inst_order_record, ignore_index=True)
            strategy_builder_orders.to_csv(inst_order_file_name, index=False)
            auto_inputs = pd.read_csv(AUTO_INPUTS_FILE)
            send_to_telegram(inst_record, inst_last_record_dir, sp_user_session, inst_order_record, strategy_name)
            place_instrument_orders(auto_inputs, inst_record)
            cus_logger.info('created new position order file')


def create_inst_order_record(ind_record, inst_last_record_dir, inst_strategy_data, inst_name,
                             strategy_name, inst_order_file_name, sp_user_session):
    quote_info = (sp_user_session.quotes({"symbols": inst_name}))['d'][0]['v']
    future_price_last_price = quote_info['lp']
    instrument_details = read_instrument_tokens(ind_record.instrument_name.split(':')[1], quote_info,
                                                inst_last_record_dir, ind_record.instrument_name.split(':')[0],
                                                ind_record.instrument_expiry_date)
    instrument_details = instrument_details.iloc[-1]
    inst_option_name = instrument_details['Symbol ticker']
    inst_option_type = instrument_details['Option type']

    if 'exit' in inst_last_record_dir:
        order_file = pd.read_csv(inst_order_file_name)
        order_file_ = order_file[order_file.inst_strategy == strategy_name].iloc[-1]
        inst_option_name = order_file_.inst_option_name
        inst_option_type = order_file_.inst_option_type
    multi_order_qty_ = multi_order_qty_normal_order(ind_record)
    return {'inst_date': inst_strategy_data.iloc[1].date, 'inst_name': inst_name,
            'inst_strategy': strategy_name, 'inst_price': future_price_last_price, 'inst_option_name': inst_option_name,
            'inst_option_type': inst_option_type, 'inst_qty': multi_order_qty_,
            'inst_direction': inst_last_record_dir, 'inst_exchange': ind_record.instrument_name.split(':')[0],
            'inst_expiry_date': ind_record.instrument_expiry_date}
