from datetime import datetime, date
from os import path

import numpy as np
import pandas as pd

from mw_srv_trade.app_common_ops.app_common_trade_constants import *
from mw_srv_trade.app_common_ops.inst_trade_order_qty_operations import *
from mw_srv_trade.app_common_trade_lib.strategy_builder.strategy_builder_common import *
from mw_srv_trade.app_common_trade_logger.logger import cus_logger
from mw_srv_trade.app_inst_mkt_data_ops.inst_mkt_data_feed_fetch_ops import read_data_file


def inst_mod_str_dos_exec(inst_mod_str_gen_ord_glb_obj, sp_user_ses):
    """
    This code will create each new orders in the file by comparing the previous two records generated by the
    super-trend indicator.
    """
    trade_ready_inst_name = inst_mod_str_gen_ord_glb_obj['trade_ready_inst_record'].instrument_trading_symbol
    cus_logger.info('checking order available for the instrument %s', trade_ready_inst_name)
    inst_mod_str_gen_ord_file = inst_mod_str_gen_ord_file_path_read()
    inst_mod_str_gen_ord_glb_obj['inst_mod_str_gen_ord_file_exists'] = path.exists(inst_mod_str_gen_ord_file)
    inst_mod_str_gen_ord_glb_obj['inst_mod_str_gen_ord_file'] = inst_mod_str_gen_ord_file
    inst_mod_str_ltr(inst_mod_str_gen_ord_glb_obj)
    trade_ready_inst_in_mkt_timeframe(inst_mod_str_gen_ord_glb_obj)
    inst_mod_str_lr_dir = inst_mod_str_gen_ord_glb_obj['inst_mod_str_lr_dir']
    inst_with_in_mkt_timeframe = inst_mod_str_gen_ord_glb_obj['inst_with_in_mkt_timeframe']
    inst_model_lr_dir_not_nan = inst_mod_str_gen_ord_glb_obj['inst_mod_str_lr_dir'] != 'nan'

    if inst_with_in_mkt_timeframe and inst_model_lr_dir_not_nan:
        if inst_mod_str_gen_ord_glb_obj['inst_mod_str_gen_ord_file_exists']:
            inst_mod_str_gen_ord_flt_exit_ = inst_mod_str_gen_ord_flt_data(inst_mod_str_gen_ord_glb_obj)
            inst_mod_str_gen_ord_glb_obj['inst_mod_str_gen_ord_flt_exit_'] = inst_mod_str_gen_ord_flt_exit_
            if inst_mod_str_gen_ord_flt_exit_.shape[0] == 0 and 'entry' in inst_mod_str_lr_dir:
                inst_mod_str_gen_ord_df = inst_mod_str_gen_ord_glb_obj['inst_mod_str_gen_ord_df']
                inst_mod_str_gen_ord_new = inst_mod_str_gen_entry_ord_update(inst_mod_str_gen_ord_glb_obj, sp_user_ses)
                inst_mod_str_gen_ord_df_concat = [inst_mod_str_gen_ord_df, inst_mod_str_gen_ord_new]
                inst_mod_str_gen_ord_df = pd.concat(inst_mod_str_gen_ord_df_concat, ignore_index=True)
                inst_mod_str_gen_ord_df.to_csv(inst_mod_str_gen_ord_glb_obj['inst_mod_str_gen_ord_file'], index=False)
            elif inst_mod_str_gen_ord_flt_exit_.shape[0] > 0 and 'entry' in inst_mod_str_lr_dir:
                inst_mod_str_gen_ord_entry_type = inst_mod_str_gen_ord_flt_exit_.iloc[-1]
                inst_mod_str_gen_ord_entry_type = inst_mod_str_gen_ord_entry_type.inst_entry_type
                if inst_mod_str_gen_ord_entry_type != inst_mod_str_lr_dir:
                    inst_mod_str_gen_ord_glb_obj['inst_mod_str_lr_dir'] = inst_mod_str_lr_dir.replace("entry", "exit")
                    inst_mod_str_gen_ords = inst_mod_str_gen_exit_ord_update(inst_mod_str_gen_ord_glb_obj, sp_user_ses)
                    inst_mod_str_gen_ords.to_csv(inst_mod_str_gen_ord_glb_obj['inst_mod_str_gen_ord_file'], index=False)
                else:
                    cus_logger.info('Fresh Order Not available')
            elif inst_mod_str_gen_ord_flt_exit_.shape[0] > 0 and 'exit' in inst_mod_str_lr_dir:
                inst_mod_str_gen_ord_glb_obj['inst_mod_str_lr_dir'] = inst_mod_str_lr_dir.replace("entry", "exit")
                inst_mod_str_gen_ords = inst_mod_str_gen_exit_ord_update(inst_mod_str_gen_ord_glb_obj, sp_user_ses)
                inst_mod_str_gen_ords.to_csv(inst_mod_str_gen_ord_glb_obj['inst_mod_str_gen_ord_file'], index=False)
        else:
            if 'entry' in inst_mod_str_lr_dir:
                inst_mod_str_gen_ord_new = inst_mod_str_gen_entry_ord_update(inst_mod_str_gen_ord_glb_obj, sp_user_ses)
                inst_mod_str_gen_ord_new.to_csv(inst_mod_str_gen_ord_glb_obj['inst_mod_str_gen_ord_file'], index=False)
            elif 'exit' in inst_mod_str_lr_dir:
                cus_logger.info('Exit Order Generated; But Generic order file is not Available.')
    elif inst_mod_str_gen_ord_glb_obj['after_market']:
        if inst_mod_str_gen_ord_glb_obj['inst_mod_str_gen_ord_file_exists']:
            inst_mod_str_gen_ord_flt_exit_ = inst_mod_str_gen_ord_flt_data(inst_mod_str_gen_ord_glb_obj)
            inst_mod_str_gen_ord_glb_obj['inst_mod_str_gen_ord_flt_exit_'] = inst_mod_str_gen_ord_flt_exit_
            if inst_mod_str_gen_ord_flt_exit_.shape[0] > 0:
                inst_mod_str_lr_dir = inst_mod_str_gen_ord_flt_exit_.iloc[-1].inst_entry_type
                inst_mod_str_gen_ord_glb_obj['inst_mod_str_lr_dir'] = inst_mod_str_lr_dir.replace("entry", "exit")
                inst_mod_str_gen_ords = inst_mod_str_gen_exit_ord_update(inst_mod_str_gen_ord_glb_obj, sp_user_ses)
                inst_mod_str_gen_ords.to_csv(inst_mod_str_gen_ord_glb_obj['inst_mod_str_gen_ord_file'], index=False)
        else:
            cus_logger.info('Order Generated after market hours; But File Gne order file is not Available.')


def inst_mod_str_ltr(inst_mod_str_gen_ord_glb_obj):
    trade_ready_inst_record = inst_mod_str_gen_ord_glb_obj['trade_ready_inst_record']
    trade_ready_inst_fm_name = trade_ready_inst_record.instrument_trading_symbol.replace(':', '_')
    trade_ready_inst_data_interval = inst_mod_str_gen_ord_glb_obj['auto_inputs']['data_interval'][0]
    inst_mod_str_data = read_data_file(trade_ready_inst_fm_name, TICKS_FOLDER_, trade_ready_inst_data_interval)
    inst_mod_str_ltr_data = inst_mod_str_data.tail(2)
    strategy_name = inst_mod_str_gen_ord_glb_obj['strategy_name']
    inst_mod_str_gen_ord_glb_obj['inst_mod_str_fr_dir'] = str(inst_mod_str_ltr_data.iloc[0][strategy_name])
    inst_mod_str_gen_ord_glb_obj['inst_mod_str_lr_dir'] = str(inst_mod_str_ltr_data.iloc[1][strategy_name])
    inst_mod_str_gen_ord_glb_obj['inst_mod_str_ltr_data'] = inst_mod_str_ltr_data


def trade_ready_inst_in_mkt_timeframe(inst_model_strategy_global_obj):
    trade_ready_inst_name = inst_model_strategy_global_obj['trade_ready_inst_record'].instrument_trading_symbol
    env_execution = inst_model_strategy_global_obj['auto_inputs'].iloc[-1].env
    mkt_exit_time = exit_entry_time(trade_ready_inst_name)
    current_time = datetime.now().time().strftime('%H:%M:%S')
    if env_execution == 'prod':
        inst_with_in_mkt_timeframe = current_time < mkt_exit_time
    else:
        inst_with_in_mkt_timeframe = True
    inst_model_strategy_global_obj['after_market'] = current_time >= mkt_exit_time
    inst_model_strategy_global_obj['inst_with_in_mkt_timeframe'] = inst_with_in_mkt_timeframe
    inst_model_strategy_global_obj['trade_ready_inst_name'] = trade_ready_inst_name


def inst_mod_str_gen_ord_flt_data(inst_model_strategy_global_obj):
    strategy_name = inst_model_strategy_global_obj['strategy_name']
    trade_ready_inst_name = inst_model_strategy_global_obj['trade_ready_inst_name']
    current_date = str(date.today())
    inst_mod_str_gen_ord_df = pd.read_csv(inst_model_strategy_global_obj['inst_mod_str_gen_ord_file'])
    inst_model_strategy_global_obj['inst_mod_str_gen_ord_df'] = inst_mod_str_gen_ord_df
    inst_name_cond = inst_mod_str_gen_ord_df.inst_name == trade_ready_inst_name
    inst_mod_str_gen_ord_flt = inst_mod_str_gen_ord_df[inst_name_cond]
    inst_str_name_cond = inst_mod_str_gen_ord_flt.strategy_name == strategy_name
    inst_mod_str_gen_ord_flt = inst_mod_str_gen_ord_flt[inst_str_name_cond]
    flt_str_date_cond = inst_mod_str_gen_ord_flt['inst_date'].str.contains(current_date)
    inst_mod_str_gen_ord_flt = inst_mod_str_gen_ord_flt[flt_str_date_cond]
    inst_mod_str_gen_ord_flt = inst_mod_str_gen_ord_flt[inst_mod_str_gen_ord_flt['inst_exit_type'].isna()]
    return inst_mod_str_gen_ord_flt


def inst_mod_str_gen_entry_ord_update(inst_model_strategy_global_obj, sp_user_session):
    if 'entry' in inst_model_strategy_global_obj['inst_mod_str_lr_dir']:
        trade_ready_inst_name = inst_model_strategy_global_obj['trade_ready_inst_name']
        quote_info = (sp_user_session.quotes({"symbols": trade_ready_inst_name}))['d'][0]['v']
        future_price_last_price = quote_info['lp']
        inst_mod_str_date_date = inst_model_strategy_global_obj['inst_mod_str_ltr_data'].iloc[-1]['date']
        inst_entry_type = inst_model_strategy_global_obj['inst_mod_str_lr_dir']
        multi_order_qty_ = multi_order_qty_normal_order(inst_model_strategy_global_obj['trade_ready_inst_record'])
        inst_entry_time = datetime.now().time().strftime('%H:%M:%S')
        columns = ['inst_order_gen_date_time', 'inst_date', 'inst_name', 'inst_entry_type', 'inst_entry_time',
                   'inst_entry_qty', 'inst_entry_price', 'inst_exit_type', 'inst_exit_time', 'inst_exit_price',
                   'inst_exit_qty', 'inst_profit', 'strategy_name']
        values = [[inst_mod_str_date_date, date.today(), trade_ready_inst_name, inst_entry_type,
                   inst_entry_time, multi_order_qty_, future_price_last_price, np.nan, np.nan, np.nan, np.nan, np.nan,
                   inst_model_strategy_global_obj['strategy_name']]]
        inst_mod_str_gen_ord_new = pd.DataFrame(values, columns=columns)
        return inst_mod_str_gen_ord_new


def inst_mod_str_gen_exit_ord_update(inst_model_strategy_global_obj, sp_user_session):
    if 'exit' in inst_model_strategy_global_obj['inst_mod_str_lr_dir']:
        trade_ready_inst_name = inst_model_strategy_global_obj['trade_ready_inst_name']
        quote_info = (sp_user_session.quotes({"symbols": trade_ready_inst_name}))['d'][0]['v']
        future_price_last_price = quote_info['lp']
        ord_stat_data = inst_model_strategy_global_obj['inst_mod_str_gen_ord_df']
        ord_stat_data_flt = inst_model_strategy_global_obj['inst_mod_str_gen_ord_flt_exit_']
        inst_mod_str_lr_dir = inst_model_strategy_global_obj['inst_mod_str_lr_dir']
        inst_entry_qty = ord_stat_data_flt.inst_entry_qty.values[0]
        inst_profit = future_price_last_price - ord_stat_data_flt.inst_entry_price.values[0]
        inst_entry_time = datetime.now().time().strftime('%H:%M:%S')
        exit_update_col_names = ['inst_exit_time', 'inst_exit_price', 'inst_exit_qty', 'inst_exit_type', 'inst_profit']
        exit_update_col_val = [inst_entry_time, future_price_last_price, inst_entry_qty, inst_mod_str_lr_dir,
                               inst_profit]
        index_num = ord_stat_data_flt.index.values[0]
        ord_stat_data.loc[index_num, exit_update_col_names] = exit_update_col_val
        return ord_stat_data
