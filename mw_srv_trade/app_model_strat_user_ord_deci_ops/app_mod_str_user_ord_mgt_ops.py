from os import path

from mw_srv_trade.app_common_ops.app_common_trade_constants import *
from mw_srv_trade.app_common_ops.app_trade_market_operations import market_status
from mw_srv_trade.app_common_ops.inst_trade_selection_update_ticks_indi import trade_ready_instruments_df
from mw_srv_trade.app_common_trade_lib.session_builder.retrive_request_token import *
from mw_srv_trade.app_common_trade_lib.strategy_builder.super_log_buy_sell_strat import strategy_order_decision_maker
from mw_srv_trade.app_model_strat_user_ord_deci_ops.order_buy_sell_operations import *

cus_logger.setLevel(10)


def inst_mod_str_opt_user_order_deci_mak(auto_inputs):
    """
    This code will create each new orders in the file by comparing the previous two records generated by the
    super-trend indicator.
    """
    trade_ready_inst_records = trade_ready_instruments_df()
    sp_user_ses, sp_user_rec = super_user_session()
    for trade_ready_inst_record_position, trade_ready_inst_record in trade_ready_inst_records.iterrows():
        inst_opt_usr_ord_global_obj = {}
        trade_ready_inst_name = trade_ready_inst_record.instrument_trading_symbol
        trade_ready_inst_mk_status = trade_ready_inst_name.replace(':', '_')
        inst_opt_usr_ord_global_obj['trade_ready_inst_name'] = trade_ready_inst_name
        if trade_ready_inst_record.avail == 'Y' and market_status(trade_ready_inst_mk_status):
            strategy_name = trade_ready_inst_record.start_name
            if trade_ready_inst_record.start_name in ["super_long_buy_side", "super_long_sell_side"]:
                inst_mod_str_opt_user_order_exe_deci_mak(inst_opt_usr_ord_global_obj)
                # strategy_order_decision_maker(inst_opt_usr_ord_global_obj, sp_user_ses)
            elif trade_ready_inst_record.start_name == "day_open_strategy":
                inst_opt_usr_ord_global_obj['strategy_name'] = strategy_name
                inst_opt_usr_ord_global_obj['trade_ready_inst_record'] = trade_ready_inst_record
                inst_opt_usr_ord_global_obj['auto_inputs'] = auto_inputs
                inst_mod_str_opt_user_order_exe_deci_mak(inst_opt_usr_ord_global_obj, sp_user_ses)

    cus_logger.info('storing regular orders function is completed')


def inst_mod_str_opt_user_order_exe_deci_mak(inst_opt_usr_ord_global_obj, sp_user_ses):
    """
    This code will determine whether an existing indicator order file is available and, if so, will create a user
    order file and place a new order for each and every user.    """

    inst_mod_str_opt_ord_file = inst_mod_str_opt_ord_file_path_read()
    inst_opt_usr_ord_global_obj['inst_mod_str_opt_ord_file'] = inst_mod_str_opt_ord_file
    inst_model_str_opt_ord_file_avail = path.exists(inst_mod_str_opt_ord_file)
    if inst_model_str_opt_ord_file_avail:
        inst_opt_ord_file_df, inst_opt_ord_flt = inst_mod_str_opt_ord_flt_data(inst_opt_usr_ord_global_obj)
        inst_opt_ord_flt = inst_opt_ord_flt[inst_opt_ord_flt['inst_exit_type'].isna()]
        user_records = pd.DataFrame(read_user_info())
        for user_record_position, user_record in user_records.iterrows():
            inst_opt_usr_ord_global_obj['user_record'] = user_record
            if inst_opt_ord_flt.size > 0:
                inst_usr_opt_ord_file = inst_usr_opt_ord_file_path(inst_opt_usr_ord_global_obj)
                if path.exists(inst_usr_opt_ord_file):
                    user_ord_file_flt = inst_mod_str_usr_opt_ord_flt_data(inst_opt_usr_ord_global_obj)
                    if user_ord_file_flt.size > 0:
                        inst_opt_ord_flt_entry_type = inst_opt_ord_flt.iloc[-1].inst_entry_type
                        user_ord_file_flt_entry_type = user_ord_file_flt.iloc[-1].inst_entry_type
                        if inst_opt_ord_flt_entry_type == user_ord_file_flt_entry_type:
                            print("fresh order is not available")
                        elif inst_opt_ord_flt_entry_type != user_ord_file_flt_entry_type:
                            inst_model_str_opt_user_ord_file_exit_ops(inst_opt_usr_ord_global_obj, sp_user_ses)
                    else:
                        inst_model_str_opt_user_ord_file_entry_ops(inst_opt_usr_ord_global_obj)
                else:
                    inst_model_str_opt_user_ord_file_entry_ops(inst_opt_usr_ord_global_obj)
            elif inst_opt_ord_flt.size == 0:
                inst_usr_opt_ord_file = inst_usr_opt_ord_file_path(inst_opt_usr_ord_global_obj)
                if path.exists(inst_usr_opt_ord_file):
                    user_ord_file_flt = inst_mod_str_usr_opt_ord_flt_data(inst_opt_usr_ord_global_obj)
                    if user_ord_file_flt.size > 0:
                        inst_model_str_opt_user_ord_file_exit_ops(inst_opt_usr_ord_global_obj, sp_user_ses)
                    else:
                        cus_logger.info('inst user option exit order not available')
                else:
                    cus_logger.info('inst user option order file is not available')
    else:
        cus_logger.info('inst model strategy option order file is not available')


def inst_mod_str_usr_opt_ord_flt_data(inst_opt_usr_ord_global_obj):
    inst_usr_opt_ord_file = inst_opt_usr_ord_global_obj['inst_usr_opt_ord_file']
    opt_usr_ord_file_df = pd.read_csv(inst_usr_opt_ord_file)
    inst_opt_usr_ord_global_obj['opt_usr_ord_file_df'] = opt_usr_ord_file_df
    user_ord_file_flt = opt_usr_ord_file_df.dropna(subset=['strategy_name', 'inst_date'])
    trade_ready_inst_name = inst_opt_usr_ord_global_obj['trade_ready_inst_name']
    trade_ready_inst_name_cond = user_ord_file_flt['inst_name'].str.contains(trade_ready_inst_name)
    user_ord_file_flt = user_ord_file_flt[trade_ready_inst_name_cond]
    strategy_name = inst_opt_usr_ord_global_obj['strategy_name']
    strategy_name_cond = user_ord_file_flt['strategy_name'].str.contains(strategy_name)
    user_ord_file_flt = user_ord_file_flt[strategy_name_cond]
    date_cond = user_ord_file_flt['inst_date'].str.contains(str(date.today()))
    user_ord_file_flt = user_ord_file_flt[date_cond]
    user_ord_file_flt = user_ord_file_flt[user_ord_file_flt['inst_exit_type'].isna()]
    inst_opt_usr_ord_global_obj['user_ord_file_flt'] = user_ord_file_flt
    return user_ord_file_flt


def inst_usr_opt_ord_file_path(inst_opt_usr_ord_global_obj):
    user_record = inst_opt_usr_ord_global_obj['user_record']
    user_name = user_record['name'].replace('.', '_')
    user_id = user_record.user_id
    file_name = "day_inst_option_usr_ord.csv"
    user_ord_file_path = "resources/orders/inst_model_strat_option_user_orders/"
    inst_usr_opt_ord_file = user_ord_file_path + user_name + '_' + user_id + '_' + file_name
    inst_opt_usr_ord_global_obj['inst_usr_opt_ord_file'] = inst_usr_opt_ord_file
    return inst_usr_opt_ord_file


def inst_mod_str_opt_ord_flt_data(inst_opt_usr_ord_global_obj):
    inst_mod_str_opt_ord_file = inst_opt_usr_ord_global_obj['inst_mod_str_opt_ord_file']
    inst_model_str_opt_ord_file_df = pd.read_csv(inst_mod_str_opt_ord_file)
    inst_opt_usr_ord_global_obj['inst_model_str_opt_ord_file_df'] = inst_model_str_opt_ord_file_df
    inst_opt_ord_flt = inst_model_str_opt_ord_file_df.dropna(subset=['strategy_name', 'inst_date'])
    trade_ready_inst_name = inst_opt_usr_ord_global_obj['trade_ready_inst_name']
    trade_ready_inst_name_cond = inst_opt_ord_flt['inst_name'].str.contains(trade_ready_inst_name)
    inst_opt_ord_flt = inst_opt_ord_flt[trade_ready_inst_name_cond]
    strategy_name = inst_opt_usr_ord_global_obj['strategy_name']
    strategy_name_cond = inst_opt_ord_flt['strategy_name'].str.contains(strategy_name)
    inst_opt_ord_flt = inst_opt_ord_flt[strategy_name_cond]
    date_cond = inst_opt_ord_flt['inst_date'].str.contains(str(date.today()))
    inst_opt_ord_flt = inst_opt_ord_flt[date_cond]
    inst_opt_ord_flt = inst_opt_ord_flt[inst_opt_ord_flt['inst_exit_type'].isna()]
    inst_opt_usr_ord_global_obj['inst_opt_ord_flt'] = inst_opt_ord_flt
    return inst_model_str_opt_ord_file_df, inst_opt_ord_flt


def inst_model_str_opt_user_ord_file_exit_ops(inst_opt_usr_ord_global_obj, sp_user_ses):
    user_record = inst_opt_usr_ord_global_obj['user_record']
    inst_record = inst_opt_usr_ord_global_obj['trade_ready_inst_record']
    user_ord_file = inst_opt_usr_ord_global_obj['inst_usr_opt_ord_file']
    opt_usr_ord_file_df = inst_opt_usr_ord_global_obj['opt_usr_ord_file_df']
    opt_str_fil_rec = inst_opt_usr_ord_global_obj['user_ord_file_flt'].iloc[-1]
    inst_option_entry_price = opt_str_fil_rec.inst_option_entry_price
    inst_option_exit_price = opt_str_fil_rec.inst_option_exit_price
    inst_opt_profit = inst_option_entry_price - inst_option_exit_price
    inst_exit_type = opt_str_fil_rec.inst_entry_type.replace("entry", "exit")
    inst_option_exit_time = datetime.now().time().strftime('%H:%M:%S')
    trade_ready_inst_name = inst_opt_usr_ord_global_obj['trade_ready_inst_name']
    inst_option_entry_type = opt_str_fil_rec.inst_option_entry_type
    inst_exit_price = (sp_user_ses.quotes({"symbols": trade_ready_inst_name}))['d'][0]['v']['lp']
    inst_option_exit_price = (sp_user_ses.quotes({"symbols": inst_option_entry_type}))['d'][0]['v']['lp']
    col_names = ['inst_exit_type', 'inst_exit_qty', 'inst_exit_price', 'inst_option_exit_type',
                 'inst_option_exit_price', 'inst_option_exit_time', 'inst_option_profit']
    val_names = [inst_exit_type, opt_str_fil_rec.inst_entry_qty, inst_exit_price, inst_option_entry_type,
                 inst_option_exit_price, inst_option_exit_time, inst_opt_profit]
    index_num = inst_opt_usr_ord_global_obj['user_ord_file_flt'].index.values[0]
    opt_usr_ord_file_df.loc[index_num, col_names] = val_names
    inst_order_last_record = pd.DataFrame(opt_usr_ord_file_df.loc[index_num]).T
    inst_direction = "exit"
    opt_usr_ord_file_df.to_csv(user_ord_file, index=False)
    place_instrument_user_orders_based_position(inst_order_last_record, inst_record, user_record, inst_direction)


def inst_model_str_opt_user_ord_file_entry_ops(inst_opt_usr_ord_global_obj):
    user_record = inst_opt_usr_ord_global_obj['user_record']
    inst_record = inst_opt_usr_ord_global_obj['trade_ready_inst_record']
    user_ord_file = inst_opt_usr_ord_global_obj['inst_usr_opt_ord_file']
    inst_model_str_opt_ord_file_df = pd.DataFrame()
    inst_opt_ord_flt = inst_opt_usr_ord_global_obj['inst_opt_ord_flt'].iloc[-1]
    if path.exists(user_ord_file):
        inst_model_str_opt_ord_file_df = inst_opt_usr_ord_global_obj['opt_usr_ord_file_df']
    col_names = ['inst_order_gen_date_time', 'inst_date', 'inst_name', 'inst_opt_sym_name', 'inst_entry_type',
                 'inst_entry_qty', 'inst_entry_price', 'inst_option_entry_type', 'inst_option_entry_price',
                 'inst_option_entry_time', 'inst_exit_type', 'inst_exit_qty', 'inst_exit_price',
                 'inst_option_exit_type', 'inst_option_exit_price', 'inst_option_exit_time', 'inst_option_profit',
                 'strategy_name']
    val_names = [[inst_opt_ord_flt.inst_order_gen_date_time, inst_opt_ord_flt.inst_date, inst_opt_ord_flt.inst_name,
                  inst_opt_ord_flt.inst_opt_sym_name, inst_opt_ord_flt.inst_entry_type, inst_opt_ord_flt.inst_entry_qty,
                  inst_opt_ord_flt.inst_entry_price, inst_opt_ord_flt.inst_option_entry_type,
                  inst_opt_ord_flt.inst_option_entry_price, inst_opt_ord_flt.inst_option_entry_time, np.nan, np.nan,
                  np.nan, np.nan, np.nan, np.nan, np.nan, inst_opt_ord_flt.strategy_name]]
    inst_opt_ord_new = pd.DataFrame(val_names, columns=col_names)
    inst_model_str_opt_ord_file_df = pd.concat([inst_model_str_opt_ord_file_df, inst_opt_ord_new], ignore_index=True)
    inst_order_last_record = inst_opt_ord_new
    inst_direction = "entry"
    inst_model_str_opt_ord_file_df.to_csv(user_ord_file, index=False)
    place_instrument_user_orders_based_position(inst_order_last_record, inst_record, user_record, inst_direction)


def place_instrument_user_orders_based_position(inst_order_last_record, inst_record, user_record, inst_direction):
    """
    This code will check the user's position and, based on that, will either enter a new position or exit an existing
    position and enter a new one.
    """
    inst_order_last_record = inst_order_last_record.iloc[0]
    inst_opt_name = inst_order_last_record.inst_option_entry_type
    user_session = generate_user_session(user_record)
    env = pd.read_csv(AUTO_INPUTS_FILE).iloc[0].env
    user_net_positions = pd.DataFrame(user_session.positions()['netPositions'])
    if env == 'test':
        user_net_positions = pd.read_csv('resources/orders/inst_model_strat_option_user_positions/net_positions.csv')
    cus_logger.info('checking existing position is available or not')
    if user_net_positions.shape[0] > 0 and user_net_positions[user_net_positions['qty'] != 0].shape[0] > 0:
        user_net_positions = user_net_positions[user_net_positions.symbol == inst_opt_name]
        if (user_net_positions.shape[0] > 0) and ('exit' in str(inst_direction)):
            cus_logger.info('clearing ext inst_model_strategy_option_user_positions %s As holding qty', inst_opt_name)
            user_position_exit(inst_order_last_record, inst_record, user_record, user_session)
        elif (user_net_positions.shape[0] == 0) and ('entry' in str(inst_direction)):
            cus_logger.info('Entering into inst position %s As qty zero', inst_opt_name)
            user_position_enter(inst_order_last_record, inst_record, user_record, user_session)
    else:
        cus_logger.info('Entering into new inst position %s As qty zero', inst_opt_name)
        user_position_enter(inst_order_last_record, inst_record, user_record, user_session)
