import datetime
from datetime import date, timedelta
from os import path

import numpy as np

from mw_srv_trade.app_common_ops.app_common_inst_down_filter_read_write_ops import read_instrument_tokens
from mw_srv_trade.app_common_ops.app_trade_market_operations import market_status
from mw_srv_trade.app_common_ops.inst_trade_selection_update_ticks_indi import trade_ready_instruments_df
from mw_srv_trade.app_common_trade_lib.session_builder.retrive_request_token import super_user_session
from mw_srv_trade.app_common_trade_lib.strategy_builder.super_log_buy_sell_strat import strategy_order_decision_maker
from mw_srv_trade.app_common_trade_lib.tech_indicator.super_trend_builder import super_trend
from mw_srv_trade.app_common_trade_logger.logger import cus_logger
from mw_srv_trade.app_msg_notify_chans_ops.org_msg_prep import *

cus_logger.setLevel(10)


def inst_model_strategy_option_order_decision_maker(auto_inputs):
    """
    This code will create each new orders in the file by comparing the previous two records generated by the
    super-trend indicator.
    """
    trade_ready_inst_records = trade_ready_instruments_df()
    sp_user_ses, sp_user_rec = super_user_session()
    for trade_ready_inst_record_position, trade_ready_inst_record in trade_ready_inst_records.iterrows():
        inst_opt_ord_global_obj = {}
        trade_ready_inst_name = trade_ready_inst_record.instrument_trading_symbol
        trade_ready_inst_mk_status = trade_ready_inst_name.replace(':', '_')
        inst_opt_ord_global_obj['trade_ready_inst_name'] = trade_ready_inst_name
        if trade_ready_inst_record.avail == 'Y' and market_status(trade_ready_inst_mk_status):
            strategy_name = trade_ready_inst_record.start_name
            if trade_ready_inst_record.start_name in ["super_long_buy_side", "super_long_sell_side"]:
                inst_opt_ord_global_obj['strategy_name'] = strategy_name
                inst_opt_ord_global_obj['inst_model_record'] = trade_ready_inst_record
                inst_opt_ord_global_obj['auto_inputs'] = auto_inputs
                #strategy_order_decision_maker(inst_opt_ord_global_obj, sp_user_ses)
            elif trade_ready_inst_record.start_name == "day_open_strategy":
                inst_opt_ord_global_obj['strategy_name'] = strategy_name
                inst_opt_ord_global_obj['trade_ready_inst_record'] = trade_ready_inst_record
                inst_opt_ord_global_obj['auto_inputs'] = auto_inputs
                option_strategy_order_preparation(inst_opt_ord_global_obj, sp_user_ses)
    cus_logger.info('storing option orders execution is completed')


def option_strategy_order_preparation(inst_opt_ord_global_obj, sp_user_ses):
    """
    This code will create each new orders in the file by comparing the previous two records generated by the
    super-trend indicator.
    """
    inst_mod_str_gen_ord_file_path = inst_mod_str_gen_ord_file_path_read()
    inst_mod_str_opt_ord_file_path = inst_mod_str_opt_ord_file_path_read()
    gen_ord_file_exits = path.exists(inst_mod_str_gen_ord_file_path)
    opt_ord_file_exists = path.exists(inst_mod_str_opt_ord_file_path)
    inst_opt_ord_global_obj['inst_mod_str_gen_ord_file_path'] = inst_mod_str_gen_ord_file_path
    inst_opt_ord_global_obj['inst_mod_str_opt_ord_file_path'] = inst_mod_str_opt_ord_file_path
    inst_opt_ord_global_obj['opt_ord_file_exists'] = opt_ord_file_exists
    if gen_ord_file_exits:
        inst_model_str_gen_ord_file_df = inst_mod_str_gen_ord_flt_data(inst_opt_ord_global_obj)
        inst_mod_str_gen_ord_flt_exit_ = inst_model_str_gen_ord_file_df
        inst_opt_ord_global_obj['inst_mod_str_gen_ord_flt_exit_'] = inst_mod_str_gen_ord_flt_exit_
        if inst_mod_str_gen_ord_flt_exit_.size > 0:
            if opt_ord_file_exists:
                inst_model_str_opt_ord_file_df = inst_mode_str_opt_ord_flt_data(inst_opt_ord_global_obj)
                inst_model_str_opt_ord_file_exit_ = inst_model_str_opt_ord_file_df
                inst_opt_ord_global_obj['inst_model_str_opt_ord_file_exit_'] = inst_model_str_opt_ord_file_exit_
                if inst_model_str_opt_ord_file_exit_.size > 0:
                    opt_ord_inst_entry_type = inst_model_str_opt_ord_file_exit_.iloc[-1].inst_entry_type
                    gen_ord_inst_entry_type = inst_mod_str_gen_ord_flt_exit_.iloc[-1].inst_entry_type
                    if opt_ord_inst_entry_type != gen_ord_inst_entry_type:
                        inst_model_str_opt_ord_file_exit_ops(inst_opt_ord_global_obj, sp_user_ses)
                    elif opt_ord_inst_entry_type != gen_ord_inst_entry_type:
                        print("fresh order is not available")
                elif inst_model_str_opt_ord_file_exit_.size == 0:
                    create_inst_option_entry_order_record(inst_opt_ord_global_obj, sp_user_ses)
            else:
                create_inst_option_entry_order_record(inst_opt_ord_global_obj, sp_user_ses)
        elif inst_mod_str_gen_ord_flt_exit_.size == 0:
            if opt_ord_file_exists:
                inst_model_str_opt_ord_file_df = inst_mode_str_opt_ord_flt_data(inst_opt_ord_global_obj)
                inst_model_str_opt_ord_file_exit_ = inst_model_str_opt_ord_file_df
                inst_opt_ord_global_obj['inst_model_str_opt_ord_file_exit_'] = inst_model_str_opt_ord_file_exit_
                if inst_model_str_opt_ord_file_exit_.size > 0:
                    inst_model_str_opt_ord_file_exit_ops(inst_opt_ord_global_obj, sp_user_ses)
    else:
        cus_logger.info("gen order is not available")


def inst_mode_str_opt_ord_flt_data(inst_opt_ord_global_obj):
    inst_mod_str_opt_ord_file_path = inst_opt_ord_global_obj['inst_mod_str_opt_ord_file_path']
    inst_model_str_opt_ord_file_df = pd.read_csv(inst_mod_str_opt_ord_file_path)
    inst_opt_ord_global_obj['inst_model_str_opt_ord_file_df'] = inst_model_str_opt_ord_file_df
    trade_ready_inst_name = inst_opt_ord_global_obj['trade_ready_inst_name']
    strategy_name = inst_opt_ord_global_obj['strategy_name']
    inst_model_str_opt_ord_file_df_flt = inst_model_str_opt_ord_file_df.dropna(subset=['strategy_name', 'inst_date'])
    trade_ready_inst_cond = inst_model_str_opt_ord_file_df_flt.inst_name == trade_ready_inst_name
    inst_model_str_opt_ord_file_df_flt = inst_model_str_opt_ord_file_df_flt[trade_ready_inst_cond]
    gen_opt_cond = inst_model_str_opt_ord_file_df_flt['strategy_name'] == strategy_name
    inst_model_str_opt_ord_file_df_flt = inst_model_str_opt_ord_file_df_flt[gen_opt_cond]
    date_opt_cond = inst_model_str_opt_ord_file_df_flt['inst_date'] == str(date.today())
    inst_model_str_opt_ord_file_df_flt = inst_model_str_opt_ord_file_df_flt[date_opt_cond]
    inst_mod_str_gen_ord_flt_exit_ = inst_model_str_opt_ord_file_df_flt['inst_exit_type'].isna()
    inst_model_str_opt_ord_file_df_flt = inst_model_str_opt_ord_file_df_flt[inst_mod_str_gen_ord_flt_exit_]
    return inst_model_str_opt_ord_file_df_flt


def inst_mod_str_gen_ord_flt_data(inst_opt_ord_global_obj):
    inst_mod_str_gen_ord_file_path = inst_opt_ord_global_obj['inst_mod_str_gen_ord_file_path']
    trade_ready_inst_name = inst_opt_ord_global_obj['trade_ready_inst_name']
    strategy_name = inst_opt_ord_global_obj['strategy_name']
    inst_model_str_gen_ord_file_df = pd.read_csv(inst_mod_str_gen_ord_file_path)
    inst_opt_ord_global_obj['inst_model_str_gen_ord_file_df'] = inst_model_str_gen_ord_file_df
    inst_model_str_gen_ord_file_flt = inst_model_str_gen_ord_file_df.dropna(subset=['strategy_name', 'inst_date'])
    trade_ready_inst_name_flt_cond = inst_model_str_gen_ord_file_flt.inst_name == trade_ready_inst_name
    inst_model_str_gen_ord_file_flt = inst_model_str_gen_ord_file_flt[trade_ready_inst_name_flt_cond]
    gen_cond = inst_model_str_gen_ord_file_flt['strategy_name'] == strategy_name
    inst_model_str_gen_ord_file_flt = inst_model_str_gen_ord_file_flt[gen_cond]
    date_cond = inst_model_str_gen_ord_file_flt['inst_date'] == str(date.today())
    inst_model_str_gen_ord_file_flt = inst_model_str_gen_ord_file_flt[date_cond]
    inst_mod_str_gen_ord_flt_exit_ = inst_model_str_gen_ord_file_flt['inst_exit_type'].isna()
    inst_model_str_gen_ord_file_flt = inst_model_str_gen_ord_file_flt[inst_mod_str_gen_ord_flt_exit_]
    return inst_model_str_gen_ord_file_flt


def create_inst_option_entry_order_record(inst_opt_ord_global_obj, sp_user_ses):
    trade_ready_inst_flt_name = inst_opt_ord_global_obj['trade_ready_inst_record'].instrument_name
    trade_ready_inst_name = inst_opt_ord_global_obj['trade_ready_inst_name']
    inst_name_split = trade_ready_inst_flt_name.split(':')[1]
    inst_name_exh = trade_ready_inst_flt_name.split(':')[0]
    quote_info = sp_user_ses.quotes({"symbols": trade_ready_inst_name})['d'][0]['v']
    inst_last_record_dir = inst_opt_ord_global_obj['inst_mod_str_gen_ord_flt_exit_'].iloc[-1]['inst_entry_type']
    inst_option_fil_df = read_instrument_tokens(inst_name_split, quote_info, inst_last_record_dir, inst_name_exh)
    default_time_frame = get_option_direction(inst_option_fil_df, sp_user_ses)
    inst_opt_ord_global_obj['direction'] = get_option_direction_df(default_time_frame)
    inst_opt_ord_global_obj['inst_option_fil_df'] = inst_option_fil_df
    inst_model_str_opt_ord_file_entry_ops(inst_opt_ord_global_obj, sp_user_ses)


def inst_model_str_opt_ord_file_exit_ops(inst_opt_ord_global_obj, sp_user_ses):
    inst_model_str_opt_ord_file_exit_ = inst_opt_ord_global_obj['inst_model_str_opt_ord_file_exit_']
    inst_name = inst_model_str_opt_ord_file_exit_.inst_name.values[0]
    inst_exit_type = inst_model_str_opt_ord_file_exit_.inst_entry_type.values[0].replace("entry", "exit")
    inst_exit_qty = inst_model_str_opt_ord_file_exit_.inst_entry_qty.values[0]
    inst_exit_price = sp_user_ses.quotes({"symbols": inst_name})['d'][0]['v']['ask']
    inst_option_exit_type = inst_model_str_opt_ord_file_exit_.inst_option_entry_type.values[0]
    inst_option_exit_price = sp_user_ses.quotes({"symbols": inst_option_exit_type})['d'][0]['v']['ask']
    inst_model_str_opt_ord_file_df = inst_opt_ord_global_obj['inst_model_str_opt_ord_file_df']
    index_num = inst_model_str_opt_ord_file_exit_.index.values[0]
    inst_option_exit_time = datetime.now().time().strftime('%H:%M:%S')
    inst_opt_profit = inst_model_str_opt_ord_file_exit_.inst_option_entry_price.values[0] - inst_option_exit_price
    col_names = ['inst_exit_type', 'inst_exit_qty', 'inst_exit_price', 'inst_option_exit_type',
                 'inst_option_exit_price', 'inst_option_exit_time', 'inst_option_profit']
    val_names = [inst_exit_type, inst_exit_qty, inst_exit_price, inst_option_exit_type, inst_option_exit_price,
                 inst_option_exit_time, inst_opt_profit]
    inst_model_str_opt_ord_file_df.loc[index_num, col_names] = val_names
    inst_opt_ord_global_obj['inst_opt_ord_new'] = pd.DataFrame(inst_model_str_opt_ord_file_df.loc[index_num]).T
    # inst_mod_str_tel_msg_exit_ord(inst_opt_ord_global_obj)
    inst_model_str_opt_ord_file_df.to_csv(inst_opt_ord_global_obj['inst_mod_str_opt_ord_file_path'], index=False)


def inst_model_str_opt_ord_file_entry_ops(inst_opt_ord_global_obj, sp_user_ses):
    inst_model_str_opt_ord_file_df = pd.DataFrame()
    gen_str_fil_rec = inst_opt_ord_global_obj['inst_mod_str_gen_ord_flt_exit_'].iloc[-1]
    inst_option_fil_df = inst_opt_ord_global_obj['inst_option_fil_df']
    inst_option_entry_type = inst_option_fil_df['Symbol ticker'].values[0]
    inst_opt_sym_name = inst_option_fil_df['Symbol Details'].values[0]
    inst_option_entry_price = sp_user_ses.quotes({"symbols": inst_option_entry_type})['d'][0]['v']['ask']
    inst_option_entry_time = datetime.now().time().strftime('%H:%M:%S')
    strategy_name = inst_opt_ord_global_obj['strategy_name']
    if path.exists(inst_opt_ord_global_obj['inst_mod_str_opt_ord_file_path']):
        inst_model_str_opt_ord_file_df = inst_opt_ord_global_obj['inst_model_str_opt_ord_file_df']
    col_names = ['inst_order_gen_date_time', 'inst_date', 'inst_name', 'inst_opt_sym_name', 'inst_entry_type', 'inst_entry_qty',
                 'inst_entry_price', 'inst_option_entry_type', 'inst_option_entry_price', 'inst_option_entry_time',
                 'inst_exit_type', 'inst_exit_qty', 'inst_exit_price', 'inst_option_exit_type',
                 'inst_option_exit_price', 'inst_option_exit_time', 'inst_option_profit', 'strategy_name']
    val_names = [[gen_str_fil_rec.inst_order_gen_date_time, gen_str_fil_rec.inst_date, gen_str_fil_rec.inst_name,
                  inst_opt_sym_name, gen_str_fil_rec.inst_entry_type, gen_str_fil_rec.inst_entry_qty, gen_str_fil_rec.inst_entry_price,
                  inst_option_entry_type, inst_option_entry_price, inst_option_entry_time, np.nan, np.nan, np.nan,
                  np.nan, np.nan, np.nan, np.nan, strategy_name]]
    inst_opt_ord_new = pd.DataFrame(val_names, columns=col_names)
    inst_opt_ord_global_obj['inst_opt_ord_new'] = inst_opt_ord_new
    inst_model_str_opt_ord_file_df = pd.concat([inst_model_str_opt_ord_file_df, inst_opt_ord_new], ignore_index=True)
    # inst_mod_str_tel_msg_entry_ord(inst_opt_ord_global_obj)
    inst_model_str_opt_ord_file_df.to_csv(inst_opt_ord_global_obj['inst_mod_str_opt_ord_file_path'], index=False)


def get_option_direction_df(inst_records):
    inst_records["date_on"] = inst_records["date"].dt.date
    inst_records_unique_dates = pd.DataFrame({'days': inst_records["date_on"].unique()})
    inst_records_orders = pd.DataFrame()
    direction = 'down'
    for instr_days_record_position, instr_days_record in inst_records.iloc[3:].iterrows():
        previous_record = inst_records.iloc[instr_days_record_position - 1]
        current_record = inst_records.iloc[[instr_days_record_position]]
        if previous_record.super_trend_direction_7_3 != current_record.iloc[-1].super_trend_direction_7_3:
            if current_record.iloc[-1].super_trend_direction_7_3 == 'up':
                inst_records_orders = pd.concat([inst_records_orders, current_record], ignore_index=True)
    inst_records_orders = inst_records_orders[inst_records_orders.date_on == inst_records_unique_dates.iloc[-1].days]
    if inst_records_orders.shape[0] > 0:
        inst_records_order_min_dir = inst_records_orders.close.min()
        if inst_records.iloc[-1].close > inst_records_order_min_dir:
            direction = 'up'
    return direction


def get_option_direction(instrument_details, sp_user_ses):
    """
    This code will download the historical data for all indicators
    """
    try:
        from_date = (date.today()) - timedelta(days=5)
        to_date = date.today()
        tick = instrument_details['Symbol ticker'].values[0]
        response = download_data(tick, '5', from_date, to_date, sp_user_ses)
        df = pd.DataFrame(response['candles'], columns=['date', 'open', 'high', 'low', 'close', 'volume'])
        df['date'] = (pd.to_datetime(df['date'], unit='s')).dt.tz_localize('utc').dt.tz_convert('Asia/kolkata')
        direction = get_super_trend_results(df, 7, 1)
        cus_logger.info("Last Record From new data set %s", str(pd.to_datetime(df.iloc[-1].date).time()))
    except Exception as exceptionMessage:
        raise exceptionMessage
    return direction


def download_data(ticks, interval, from_date, today, kite_session):
    response = None
    data = {"symbol": ticks.replace('_', ':'), "resolution": interval, "date_format": "1", "range_from": from_date,
            "range_to": today, "cont_flag": "0"}
    response = kite_session.history(data)
    if 'ok' in response['s']:
        cus_logger.info('data is downloading status %s and count of the data %s', response['s'],
                        len(response['candles']))
    if response is None:
        cus_logger.exception(ticks + ' instrument Service not Available')
    if 'error' in response['s']:
        cus_logger.exception(response['message'])
    return response


def get_super_trend_results(raw_df_date, period, multiplier):
    df_bk_converted_data = raw_df_date
    req_columns = ['true_range', 'average_true_range_period_7', 'final_ub', 'final_lb', 'uptrend', 'super_trend_7_3',
                   'super_trend_direction_7_3']
    df_bk_converted_data[req_columns] = None
    default_time_frame = super_trend(df_bk_converted_data, period, multiplier)
    default_time_frame['date'] = pd.to_datetime(default_time_frame['date'])
    return default_time_frame
