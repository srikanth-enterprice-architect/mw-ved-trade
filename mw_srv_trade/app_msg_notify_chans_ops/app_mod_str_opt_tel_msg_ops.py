import datetime
from datetime import date, timedelta
from os import path

import numpy as np

from mw_srv_trade.app_common_ops.app_common_inst_down_filter_read_write_ops import read_instrument_tokens
from mw_srv_trade.app_common_ops.app_trade_market_operations import market_status
from mw_srv_trade.app_common_ops.inst_trade_selection_update_ticks_indi import trade_ready_instruments_df
from mw_srv_trade.app_common_trade_lib.session_builder.retrive_request_token import super_user_session
from mw_srv_trade.app_common_trade_lib.strategy_builder.super_log_buy_sell_strat import strategy_order_decision_maker
from mw_srv_trade.app_common_trade_lib.tech_indicator.super_trend_builder import super_trend
from mw_srv_trade.app_common_trade_logger.logger import cus_logger
from mw_srv_trade.app_msg_notify_chans_ops.org_msg_prep import *

cus_logger.setLevel(10)


def inst_mod_str_opt_tel_ord_deci_mak(auto_inputs):
    """
    This code will create each new orders in the file by comparing the previous two records generated by the
    super-trend indicator.
    """
    trade_ready_inst_records = trade_ready_instruments_df()
    sp_user_ses, sp_user_rec = super_user_session()
    for trade_ready_inst_record_position, trade_ready_inst_record in trade_ready_inst_records.iterrows():
        inst_opt_tel_ord_global_obj = {}
        trade_ready_inst_name = trade_ready_inst_record.instrument_trading_symbol
        trade_ready_inst_mk_status = trade_ready_inst_name.replace(':', '_')
        inst_opt_tel_ord_global_obj['trade_ready_inst_name'] = trade_ready_inst_name
        if trade_ready_inst_record.avail == 'Y' and market_status(trade_ready_inst_mk_status):
            strategy_name = trade_ready_inst_record.start_name
            if trade_ready_inst_record.start_name in ["super_long_buy_side", "super_long_sell_side"]:
                inst_opt_tel_ord_global_obj['strategy_name'] = strategy_name
                inst_opt_tel_ord_global_obj['inst_model_record'] = trade_ready_inst_record
                inst_opt_tel_ord_global_obj['auto_inputs'] = auto_inputs
                #strategy_order_decision_maker(inst_opt_tel_ord_global_obj, sp_user_ses)
            elif trade_ready_inst_record.start_name == "day_open_strategy":
                inst_opt_tel_ord_global_obj['strategy_name'] = strategy_name
                inst_opt_tel_ord_global_obj['trade_ready_inst_record'] = trade_ready_inst_record
                inst_opt_tel_ord_global_obj['auto_inputs'] = auto_inputs
                inst_mod_str_tel_ord_msg_prep(inst_opt_tel_ord_global_obj, sp_user_ses)
    cus_logger.info('storing option orders execution is completed')


def inst_mod_str_tel_ord_msg_prep(inst_opt_tel_ord_global_obj, sp_user_ses):
    """
    This code will create each new orders in the file by comparing the previous two records generated by the
    super-trend indicator.
    """
    inst_mod_str_opt_tel_ord_file = inst_mod_str_opt_tel_ord_file_path_read()
    inst_mod_str_opt_ord_file = inst_mod_str_opt_ord_file_path_read()
    tel_ord_file_exits = path.exists(inst_mod_str_opt_tel_ord_file)
    opt_ord_file_exists = path.exists(inst_mod_str_opt_ord_file)
    inst_opt_tel_ord_global_obj['tel_ord_file_exits'] = tel_ord_file_exits
    inst_opt_tel_ord_global_obj['inst_mod_str_opt_ord_file'] = inst_mod_str_opt_ord_file
    inst_opt_tel_ord_global_obj['inst_mod_str_opt_tel_ord_file'] = inst_mod_str_opt_tel_ord_file
    inst_opt_tel_ord_global_obj['opt_ord_file_exists'] = opt_ord_file_exists
    if opt_ord_file_exists:
        inst_mode_str_opt_ord_flt_df = inst_mode_str_opt_ord_flt_data(inst_opt_tel_ord_global_obj)
        inst_mod_str_opt_ord_flt_exit_ = inst_mode_str_opt_ord_flt_df
        inst_opt_tel_ord_global_obj['inst_mod_str_opt_ord_flt_exit_'] = inst_mod_str_opt_ord_flt_exit_
        if inst_mod_str_opt_ord_flt_exit_.size > 0:
            if tel_ord_file_exits:
                inst_model_str_tel_ord_file_df = inst_mod_str_tel_ord_flt_data(inst_opt_tel_ord_global_obj)
                inst_model_str_tel_ord_file_exit_ = inst_model_str_tel_ord_file_df
                inst_opt_tel_ord_global_obj['inst_model_str_tel_ord_file_exit_'] = inst_model_str_tel_ord_file_exit_
                if inst_model_str_tel_ord_file_exit_.size > 0:
                    opt_ord_inst_entry_type = inst_model_str_tel_ord_file_exit_.iloc[-1]['instrument entry type']
                    gen_ord_inst_entry_type = inst_mod_str_opt_ord_flt_exit_.iloc[-1].inst_entry_type
                    if opt_ord_inst_entry_type != gen_ord_inst_entry_type:
                        inst_mod_str_tel_msg_exit_ord(inst_opt_tel_ord_global_obj, sp_user_ses)
                    elif opt_ord_inst_entry_type == gen_ord_inst_entry_type:
                        print("fresh order is not available")
                elif inst_model_str_tel_ord_file_exit_.size == 0:
                    inst_mod_str_tel_msg_entry_ord(inst_opt_tel_ord_global_obj, sp_user_ses)
            else:
                inst_mod_str_tel_msg_entry_ord(inst_opt_tel_ord_global_obj, sp_user_ses)
        elif inst_mod_str_opt_ord_flt_exit_.size == 0:
            if tel_ord_file_exits:
                inst_model_str_opt_tel_ord_file_df = inst_mod_str_tel_ord_flt_data(inst_opt_tel_ord_global_obj)
                inst_model_str_tel_ord_file_exit_ = inst_model_str_opt_tel_ord_file_df
                inst_opt_tel_ord_global_obj['inst_model_str_tel_ord_file_exit_'] = inst_model_str_tel_ord_file_exit_
                if inst_model_str_tel_ord_file_exit_.size > 0:
                    inst_mod_str_tel_msg_exit_ord(inst_opt_tel_ord_global_obj, sp_user_ses)
    else:
        cus_logger.info("gen order is not available")


def inst_mod_str_tel_ord_flt_data(inst_opt_tel_ord_global_obj):
    inst_mod_str_tel_ord_file_path = inst_opt_tel_ord_global_obj['inst_mod_str_opt_tel_ord_file']
    trade_ready_inst_name = inst_opt_tel_ord_global_obj['trade_ready_inst_name']
    strategy_name = inst_opt_tel_ord_global_obj['strategy_name']
    inst_model_str_opt_tel_ord_file_df = pd.read_csv(inst_mod_str_tel_ord_file_path)
    inst_opt_tel_ord_global_obj['inst_model_str_opt_tel_ord_file_df'] = inst_model_str_opt_tel_ord_file_df
    inst_model_str_opt_tel_ord_file_flt = inst_model_str_opt_tel_ord_file_df.dropna(subset=['strategy name', 'traded date'])
    trade_ready_inst_name_flt_cond = inst_model_str_opt_tel_ord_file_flt['instrument buy name'] == trade_ready_inst_name
    inst_model_str_opt_tel_ord_file_flt = inst_model_str_opt_tel_ord_file_flt[trade_ready_inst_name_flt_cond]
    gen_cond = inst_model_str_opt_tel_ord_file_flt['strategy name'].str.contains(strategy_name)
    inst_model_str_opt_tel_ord_file_flt = inst_model_str_opt_tel_ord_file_flt[gen_cond]
    date_cond = inst_model_str_opt_tel_ord_file_flt['traded date'].str.contains(str(date.today()))
    inst_model_str_opt_tel_ord_file_flt = inst_model_str_opt_tel_ord_file_flt[date_cond]
    inst_mod_str_gen_ord_flt_exit_ = inst_model_str_opt_tel_ord_file_flt['instrument exit type'].isna()
    inst_model_str_opt_tel_ord_file_flt = inst_model_str_opt_tel_ord_file_flt[inst_mod_str_gen_ord_flt_exit_]
    return inst_model_str_opt_tel_ord_file_flt


def inst_mode_str_opt_ord_flt_data(inst_opt_ord_global_obj):
    inst_mod_str_opt_ord_file_path = inst_opt_ord_global_obj['inst_mod_str_opt_ord_file']
    inst_model_str_opt_ord_file_df = pd.read_csv(inst_mod_str_opt_ord_file_path)
    inst_opt_ord_global_obj['inst_model_str_opt_ord_file_df'] = inst_model_str_opt_ord_file_df
    trade_ready_inst_name = inst_opt_ord_global_obj['trade_ready_inst_name']
    strategy_name = inst_opt_ord_global_obj['strategy_name']
    inst_model_str_opt_ord_file_df = inst_model_str_opt_ord_file_df.dropna(subset=['strategy_name', 'inst_date'])
    trade_ready_inst_cond = inst_model_str_opt_ord_file_df.inst_name == trade_ready_inst_name
    inst_model_str_opt_ord_file_df_flt = inst_model_str_opt_ord_file_df[trade_ready_inst_cond]
    gen_opt_cond = inst_model_str_opt_ord_file_df_flt['strategy_name'].str.contains(strategy_name)
    inst_model_str_opt_ord_file_df_flt = inst_model_str_opt_ord_file_df_flt[gen_opt_cond]
    date_opt_cond = inst_model_str_opt_ord_file_df_flt['inst_date'].str.contains(str(date.today()))
    inst_model_str_opt_ord_file_df_flt = inst_model_str_opt_ord_file_df_flt[date_opt_cond]
    inst_mod_str_gen_ord_flt_exit_ = inst_model_str_opt_ord_file_df_flt['inst_exit_type'].isna()
    inst_model_str_opt_ord_file_df_flt = inst_model_str_opt_ord_file_df_flt[inst_mod_str_gen_ord_flt_exit_]
    return inst_model_str_opt_ord_file_df_flt
